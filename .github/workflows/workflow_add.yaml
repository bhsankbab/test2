name: Github Workflow Permission Manager New
run-name: New Permission Manager
on:
  workflow_dispatch:
    inputs:
      repos:
        required: true
        type: string
        description: Specify Repo Name or Names to be added
        default: "-"
env:
  org: bhsankbab
jobs:
  workflow-permissions:
    runs-on: ubuntu-latest
    timeout-minutes: 40
    steps:
      - uses: actions/checkout@v3
        with:
          sparse-checkout: |
            org-repos
          sparse-checkout-cone-mode: false
      - name: Get noreply email address of actor
        uses: actions/github-script@v6.4.1
        id: my-script
        with:
          result-encoding: string
          script: |
            let user = await github.rest.users.getByUsername({
              username: context.actor
            });
            return `${user.data.id}+${context.actor}@users.noreply.github.com`

      - name: set git username and email
        run: |
          git config --global user.name "${{ github.actor }}"
          git config --global user.email "${{ steps.my-script.outputs.result }}"
      - name: WorkFlow Permission Adding
        env:
          SUPER_SECRET: ${{ secrets.MY_TOKEN }}
          list: ${{ inputs.repo_list }}
        run: |
            curl -s -L -X PUT  -H "Accept: application/vnd.github+json"   -H "Authorization: Bearer ${{ secrets.MY_TOKEN }}"  -H "X-GitHub-Api-Version: 2022-11-28"  https://api.github.com/orgs/${{ env.org }}/actions/permissions -d '{"enabled_repositories":"selected","allowed_actions":"selected"}'
            permissions=$(cat org-repos/thirdparty-sources.txt)
            content=$(echo "${permissions//$'\n'/}")
            echo $content
            curl -L -X PUT  -H "Accept: application/vnd.github+json"   -H "Authorization: Bearer ${{ secrets.MY_TOKEN }}"  -H "X-GitHub-Api-Version: 2022-11-28"  https://api.github.com/orgs/${{ env.org }}/actions/permissions/selected-actions -d '{"github_owned_allowed":true,"verified_allowed":true,"patterns_allowed":['"$content"']}'
            IFS=',' read -r -a repo <<< "${{ inputs.repos }}"
            for p in "${repo[@]}"; do
            status=$(curl -s  -L   -H "Accept: application/vnd.github+json"   -H "Authorization: Bearer ${{ secrets.MY_TOKEN }}"  -H "X-GitHub-Api-Version: 2022-11-28"   https://api.github.com/repos/${{ env.org }}/"$p" | jq -r .archived)
            rid=$(curl -s  -L   -H "Accept: application/vnd.github+json"   -H "Authorization: Bearer ${{ secrets.MY_TOKEN }}"  -H "X-GitHub-Api-Version: 2022-11-28"   https://api.github.com/repos/${{ env.org }}/"$p" | jq -r .id)
            check=$(grep $rid org-repos/ids.txt)
            if [ "$status" = "false" ] && [ -z "$check" ]; then
            curl -s  -L   -H "Accept: application/vnd.github+json"   -H "Authorization: Bearer ${{ secrets.MY_TOKEN }}"  -H "X-GitHub-Api-Version: 2022-11-28"   https://api.github.com/repos/${{ env.org }}/"$p" | jq -r .id >> org-repos/ids.txt
            else
            echo " Repo $p is Archived or already exists"
            fi
            done
            IDS=$(cat org-repos/ids.txt | tr -s '\n' ',' | awk 'gsub(/,$/,x)')
            echo " $IDS "
            curl -L -X PUT  -H "Accept: application/vnd.github+json"   -H "Authorization: Bearer ${{ secrets.MY_TOKEN }}"  -H "X-GitHub-Api-Version: 2022-11-28" https://api.github.com/orgs/${{ env.org }}/actions/permissions/repositories -d '{"selected_repository_ids":['"$IDS"']}'
            echo " Permission is added "
            COMMIT_MESG=$(git log -1 --pretty=format:%s | head -n 1)
            GIT_RETRY=0
            until [ "$GIT_RETRY" -ge 10 ]
            do
            git add org-repos
            git diff --quiet && git diff --staged --quiet || git commit org-repos -m "$COMMIT_MESG [SKIP CI]"
            git config pull.rebase false  # merge (the default strategy)
            git push  && break  # substitute your command here
            GIT_RETRY=$((GIT_RETRY+1))
            RANDOM_WAIT_TIMER=$((1 + $RANDOM % 10))
            sleep $RANDOM_WAIT_TIMER
            git pull
            echo "RETRY COUNT: $GIT_RETRY"
            done
        shell: bash
